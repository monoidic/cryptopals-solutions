#!/usr/bin/env python3

import task07

def verify_ff_reverse():
  success = True
  for i in range(1, 0x100):
    x = task07.ff_reverse(i)
    if task07.galois_mult(x, i) != 1:
      print(f'{i} * {x} != 1')
      success = False
  return success

def verify_ff_divmod():
  x, y = task07.ff_divmod(0x3f7e, 0x11b)
  success = x == 0b111101 and y == 0b1
  return success

def verify_circular_shift():		# (bytes and ints)
  x = bytes.fromhex('1d2c3a4f')
  y = task07.circular_shift(x, 1)
  success = y == bytes.fromhex('2c3a4f1d')
  success &= task07.circular_shift(y, 1, lshift=False) == x

  i = 0b10110111
  j = task07.circular_shift(i, 2, 8)
  success &= j == 0b11011110
  success &= task07.circular_shift(j, 2, 8, lshift=False) == i
  return success

def verify_galois_mult(): #partially done by verify_ff_reverse?
  pass

def verify_rcon():
  consts = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
  success = True
  for i in range(10):
    rcon = task07.rcon(i+1)
    success &= rcon == int.to_bytes(consts[i], 4, 'little')
  return success

def verify_gen_keys(): # https://www.samiam.org/key-schedule.html
  keys = task07.gen_keys(bytes.fromhex('69 20 e2 99 a5 20 2a 6d 65 6e 63 68 69 74 6f 2a'))
  success = keys[5] == bytes.fromhex('88 1b 4a b2 ba 26 5d 8b aa d0 2b c3 61 44 fd 50')
  success &= keys[10] == bytes.fromhex('ae 12 7c da db 47 9b a8 f2 20 df 3d 48 58 f6 b1')
  return success

def verify_SubBytes():
  invalids = ([], [])
  for i in range(0x100):
    s = task07.SubBytes(bytes([i]))[0]
    if s != sbox[i]:
      invalids[0].append(i)
    s = task07.SubBytes(bytes([i]), reverse=True)[0]
    if s != rsbox[i]:
      invalids[1].append(i)
  if len(invalids[0]) == len(invalids[1]) == 0:
    return True
  print(f'SubBytes invalids: {invalids}')
  return False

def verify_ShiftRows():
  testblock = bytes(range(16))
  valid_rows = [b'\x00\x01\x02\x03', b'\x05\x06\x07\x04', b'\x0a\x0b\x08\x09', b'\x0f\x0c\x0d\x0e']
  outblock = task07.ShiftRows(testblock)
  success = task07.ShiftRows(outblock, reverse=True) == testblock
  for i in range(4):
    success &= outblock[i*4:(i+1)*4] == valid_rows[i]
  return success


def verify_MixColumns():
  testblock =  bytes([219, 242, 1, 198,   19, 10,  1, 198,   83,  34, 1, 198,   69,  92,  1, 198])
  validblock = bytes([142, 159, 1, 198,   77, 220, 1, 198,   161, 88, 1, 198,   188, 157, 1, 198])
  outblock = task07.MixColumns(testblock)
  success = outblock == validblock
  success &= task07.MixColumns(outblock, reverse=True) == testblock
  return success

sbox = [
  0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
  0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
  0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
  0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
  0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
  0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
  0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
  0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
  0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
  0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
  0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
  0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
  0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
  0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
  0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
  0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
] # https://anh.cs.luc.edu/331/code/aes.py

rsbox = [
  0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
  0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
  0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
  0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
  0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
  0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
  0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
  0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
  0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
  0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
  0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
  0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
  0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
  0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
  0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
  0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
] # https://anh.cs.luc.edu/331/code/aes.py

def testall():
  all_succeeded = True
  for f in [verify_ff_reverse, verify_ff_divmod, verify_circular_shift,
            verify_rcon, verify_ShiftRows, verify_MixColumns,
            verify_SubBytes, verify_gen_keys]:
    succeeded = f()
    if not succeeded:
      print(f'{f.__name__} failed')
      all_succeeded = False
  if all_succeeded:
    print('All tests succeeded')

if __name__ == '__main__':
  testall()
